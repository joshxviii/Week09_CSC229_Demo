/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author MoaathAlrajab
 */
public class Homework09 {

    // ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over one hundred divisors?
    
    */


    public static void main(String[] args) {
        findTriangleNumByFactors(100);
    }

    public static int findTriangleNumByFactors(int factorAmount) {
        int factorCount = 0;
        int i=0;
        while(factorCount<=factorAmount) {
            i++;
            factorCount = countFactors(triangleNum(i));
        }
        System.out.println("\n" + triangleNum(i) + " is the first triangle number that has "+ factorAmount +" or more factors. " + "("+factorCount+")");
        return triangleNum(i);
    } // use 'triangleNum' as an argument for the 'countFactors' method and keep iterating until 'factorCount' surpasses the target 'factorAmount' (100).

    public static int triangleNum(int num) {
        return (num*(num+1))/2;
    } // formula for calculating triangle numbers.

    public static int countFactors(int num) {
        int count = 0;
        //System.out.print(num+": ");
        for (int i = 1; i <= num; i++) {
            if (num % i == 0) {
                //System.out.print(i+" ");
                count++;
            }
        }
        //System.out.print("\n");
        return count;
    } // iterate from 1 to n and count how many numbers evenly divide in the target 'num'.
}
